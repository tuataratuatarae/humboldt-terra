}
#####################################################################################################
AmaxPCA <- max(scores.env1[, 2])
BminPCA <- min(scores.env1[, 2])
PCAvL <- AmaxPCA - BminPCA
PCAvLi <- PCAvL/(R * 1)
Rana <- seq(BminPCA, AmaxPCA, length.out = (R * 1))
if(nae.window==0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + PCAvLi & scores.env1[,
2] >= y), ]
Maxi <- max(scores.env1a[, 1])
Mini <- min(scores.env1a[, 1])
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + PCAvLi & scores.env2[,
2] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 1] <= Maxi & scores.env2a[, 1] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 2] <= y + PCAvLi & scores.sp2[, 2] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 1] <= Maxi & scores.sp2a[, 1] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
if(nae.window!=0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + ((nae.window+1)*PCAvLi) & scores.env1[,
2] >= y - ((nae.window)*PCAvLi)), ]
Maxi <- max(scores.env1a[, 1])
Mini <- min(scores.env1a[, 1])
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + PCAvLi & scores.env2[,
2] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 1] <= Maxi & scores.env2a[, 1] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 2] <= y + PCAvLi & scores.sp2[, 2] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 1] <= Maxi & scores.sp2a[, 1] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
##################################################################################################
print(paste("Step 2. Remove non-analogous environments:", RedP1Czz - nrow(scores.env2),
" sites removed from environment 2 (from a total of remaining sites ", RedP1Czz,
" after Step 1),", nrow(scores.env2),"sites remain"))
print(paste("Step 2. Remove non-analogous environments:", RedP1spzz - nrow(scores.sp2),
" localities removed from sp 2 dataset (from a total of remaining sites ", RedP1spzz,
" after Step 1),", nrow(scores.sp2),"localities remain"))
#########################################################################################################################
AmaxPCA <- max(scores.env2[, 2])
BminPCA <- min(scores.env2[, 2])
PCAvL <- AmaxPCA - BminPCA
PCAvLi <- PCAvL/(R * 1)
Rana <- seq(BminPCA, AmaxPCA, length.out = (R * 1))
if(nae.window==0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + PCAvLi & scores.env2[,
2] >= y), ]
Maxi <- max(scores.env2a[, 1])
Mini <- min(scores.env2a[, 1])
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + PCAvLi & scores.env1[,
2] >= y), ]
scores.env1a <- scores.env1a[which(scores.env1a[, 1] <= Maxi & scores.env1a[, 1] >=
Mini), ]
if (!exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- scores.env1a
}
if (exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- rbind(scores.env1a, scores.env1b)
}
scores.sp1a <- scores.sp1[which(scores.sp1[, 2] <= y + PCAvLi & scores.sp1[, 2] >=
y), ]
scores.sp1a <- scores.sp1a[which(scores.sp1a[, 1] <= Maxi & scores.sp1a[, 1] >= Mini),
]
if (!exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- scores.sp1a
}
if (exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- rbind(scores.sp1a, scores.sp1b)
}
}
scores.sp1 <- scores.sp1b
rm(scores.sp1b)
scores.env1 <- scores.env1b
rm(scores.env1b)
}
if(nae.window!=0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + ((nae.window+1)*PCAvLi) & scores.env2[,
2] >= y - ((nae.window)*PCAvLi)), ]
Maxi <- max(scores.env2a[, 1])
Mini <- min(scores.env2a[, 1])
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + PCAvLi & scores.env1[,
2] >= y), ]
scores.env1a <- scores.env1a[which(scores.env1a[, 1] <= Maxi & scores.env1a[, 1] >=
Mini), ]
if (!exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- scores.env1a
}
if (exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- rbind(scores.env1a, scores.env1b)
}
scores.sp1a <- scores.sp1[which(scores.sp1[, 2] <= y + PCAvLi & scores.sp1[, 2] >=
y), ]
scores.sp1a <- scores.sp1a[which(scores.sp1a[, 1] <= Maxi & scores.sp1a[, 1] >= Mini),
]
if (!exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- scores.sp1a
}
if (exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- rbind(scores.sp1a, scores.sp1b)
}
}
scores.sp1 <- scores.sp1b
rm(scores.sp1b)
scores.env1 <- scores.env1b
rm(scores.env1b)
}
###################################################################################################
AmaxPCA <- max(scores.env2[, 1])
BminPCA <- min(scores.env2[, 1])
PCAvL <- AmaxPCA - BminPCA
PCAvLi <- PCAvL/(R * 1)
Rana <- seq(BminPCA, AmaxPCA, length.out = (R * 1))
if(nae.window==0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env2a <- scores.env2[which(scores.env2[, 1] <= y + PCAvLi & scores.env2[,
1] >= y), ]
Maxi <- max(scores.env2a[, 2])
Mini <- min(scores.env2a[, 2])
scores.env1a <- scores.env1[which(scores.env1[, 1] <= y + PCAvLi & scores.env1[,
1] >= y), ]
scores.env1a <- scores.env1a[which(scores.env1a[, 2] <= Maxi & scores.env1a[, 2] >=
Mini), ]
if (!exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- scores.env1a
}
if (exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- rbind(scores.env1a, scores.env1b)
}
scores.sp1a <- scores.sp1[which(scores.sp1[, 1] <= y + PCAvLi & scores.sp1[, 1] >=
y), ]
scores.sp1a <- scores.sp1a[which(scores.sp1a[, 2] <= Maxi & scores.sp1a[, 2] >= Mini),
]
if (!exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- scores.sp1a
}
if (exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- rbind(scores.sp1a, scores.sp1b)
}
}
scores.sp1 <- scores.sp1b
rm(scores.sp1b)
scores.env1 <- scores.env1b
rm(scores.env1b)
}
if(nae.window!=0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env2a <- scores.env2[which(scores.env2[, 1] <= y + ((nae.window+1)*PCAvLi) & scores.env2[,
1] >= y - ((nae.window)*PCAvLi)), ]
Maxi <- max(scores.env2a[, 2])
Mini <- min(scores.env2a[, 2])
scores.env1a <- scores.env1[which(scores.env1[, 1] <= y + PCAvLi & scores.env1[,
1] >= y), ]
scores.env1a <- scores.env1a[which(scores.env1a[, 2] <= Maxi & scores.env1a[, 2] >=
Mini), ]
if (!exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- scores.env1a
}
if (exists("scores.env1b") & exists("scores.env1a")) {
scores.env1b <- rbind(scores.env1a, scores.env1b)
}
scores.sp1a <- scores.sp1[which(scores.sp1[, 1] <= y + PCAvLi & scores.sp1[, 1] >=
y), ]
scores.sp1a <- scores.sp1a[which(scores.sp1a[, 2] <= Maxi & scores.sp1a[, 2] >= Mini),
]
if (!exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- scores.sp1a
}
if (exists("scores.sp1b") & exists("scores.sp1a")) {
scores.sp1b <- rbind(scores.sp1a, scores.sp1b)
}
}
scores.sp1 <- scores.sp1b
rm(scores.sp1b)
scores.env1 <- scores.env1b
rm(scores.env1b)
}
###################################################################################################
print(paste("Step 2. Remove non-analogous environments:", RedP2Czz - nrow(scores.env1),
" sites removed from environment 1 (from a total of remaining sites ", RedP2Czz,
" after Step 1),", nrow(scores.env1),"sites remain"))
print(paste("Step 2. Remove non-analogous environments:", RedP2spzz - nrow(scores.sp1),
" localities removed from sp 1 dataset (from a total of remaining sites ", RedP2spzz,
" after Step 1),", nrow(scores.sp1),"localities remain"))
scores.env12 <- rbind(scores.env1, scores.env2)
env1s2.rpts<<-nrow(scores.env1); sp1s2.rpts<<-nrow(scores.sp1);env2s2.rpts<<-nrow(scores.env2); sp2s2.rpts<<-nrow(scores.sp2)
# print(nrow(scores.env12))
if (env1s2.rpts  == 0 | env2s2.rpts  == 0 | sp1s2.rpts  == 0 | sp2s2.rpts == 0) {
print("*****************************************************************")
print("*****************************************************************")
print("*****************************************************************")
#print(env1s2.rpts)
#print(env2s2.rpts)
#print(sp1s2.rpts)
#print(sp2s2.rpts)
if (env1s2.rpts == 0){print("!!!!!No sites remain in evironment 1!!!!!")}
if (env2s2.rpts == 0){print("!!!!!No sites remain in evironment 2!!!!!")}
if (sp1s2.rpts == 0){print("!!!!!No localities remain for species 1!!!!!")}
if (sp2s2.rpts == 0){print("!!!!!No localities remain for species 2!!!!!")}
print("*****************************************************************")
print("*****************************************************************")
print("*****************************************************************")
print("The Niche Divergence Test (NDT) is only possible if some portion of the distributions exist in shared accessible environmental-space. In this analysis there exists no shared E-space between the two taxa.  This occurs if the two speciesâ€™ distributions do not overlap in shared available E-space, or if one of the species' distribution only occurs in non-analogous climates. In this situation, we recommend that your report the following:")
print("No analogous environments exist between two taxa. The absence of shared accessible analogous climates is strong evidence of niche divergence. This is supported by low niche similarity values (INPUT OBSERVED VALUE HERE FROM NOT) and significant difference obesrved in the Niche Overalp Test (INPUT P-VALUE OUTPUT FROM EQUIVALeNCE TEST).")
print("If reporting these results in a table, I sugest that you insert a symbol (for example '''**''') and then clarify in the table heading that this symbol indicates strong support for niche divergence and an equivalent interpretation to a significant NDT")
print("FINE PRINT: this message can be trigged by other errors (e.g., environmental data and species data are not properly setup), we always recommend performing a NOT with similar parameters to ensure this message is in-fact a result of the phenomena described above.")
print("*****************************************************************")
print("*****************************************************************")
print("*****************************************************************")
if(exists('inname')){print(paste0("Results file output as: ", inname, "_NDT_output.txt"))} else {inname=Sys.time()}
inname<-gsub(":","_",inname);inname<-gsub(" ", "_", inname)
fileConn<-file(paste0(inname ,"_NDT_output.txt"))
if (env1s2.rpts == 0){writeLines(c("!!!!!No sites remain in evironment 1!!!!!"), fileConn)}
if (env2s2.rpts == 0){writeLines(c("!!!!!No sites remain in evironment 2!!!!!"), fileConn)}
if (sp1s2.rpts == 0){writeLines(c("!!!!!No localities remain for species 1!!!!!"), fileConn)}
if (sp2s2.rpts == 0){writeLines(c("!!!!!No localities remain for species 2!!!!!"), fileConn)}
writeLines(c("The Niche Divergence Test (NDT) is only possible if some portion of the distributions exist in shared accessible environmental-space. In this analysis there exists no shared E-space between the two taxa.   This occurs if the two speciesâ€™ distributions do not overlap in shared available E-space, or if one of the species' distribution only occurs in non-analogous climates. In this situation, we recommend that your report the following: No analogous environments exist between two taxa. The absence of shared accessible analogous climates is strong evidence of niche divergence. This is supported by low niche similarity values (INPUT OBSERVED VALUE HERE FROM NOT) and significant difference obesrved in the Niche Overalp Test (INPUT P-VALUE OUTPUT FROM EQUIVALeNCE TEST).  If reporting these results in a table, I sugest that you insert a symbol (for example '''**''') and then clarify in the table heading that this symbol indicates strong support for niche divergence and an equivalent interpretation to a significant NDT"), fileConn)
close(fileConn)
stop("Function stopped deliberately- a NDT is not possible - read above text for explanation")}
}
if (REDUC == 6) {
for (i in col.envPCA) {
y <- i
AmaxPCA <- max(scores.env1[, y])
BminPCA <- min(scores.env1[, y])
CmaxPCA <- max(scores.env2[, y])
DminPCA <- min(scores.env2[, y])
XminPCA <- pmin(DminPCA, BminPCA)
XmaxPCA <- pmax(AmaxPCA, CmaxPCA)
scores.env2 <- scores.env2[which(scores.env2[, y] <= AmaxPCA & scores.env2[, y] >=
BminPCA), ]
scores.sp2 <- scores.sp2[which(scores.sp2[, y] <= AmaxPCA & scores.sp2[, y] >= BminPCA),
]
print(paste("***PC Environment Variable:", y))
print("BEFORE REDUCTION")
print(paste("Maximum values: Environment 1", AmaxPCA, "and Environment 2", CmaxPCA))
print(paste("Minimum values: Environment 1", BminPCA, "and Environment 2", DminPCA))
Amax2PCA <- max(scores.env1[, y])
Bmin2PCA <- min(scores.env1[, y])
Cmax2PCA <- max(scores.env2[, y])
Dmin2PCA <- min(scores.env2[, y])
print(paste("AFTER REDUCTION"))
print(paste("Maximum values for environment 2: ", Cmax2PCA))
print(paste("Minimum values for environment 2: ", Dmin2PCA))
print("*******************")
}
print(paste("Step1. Reduce environmental space to max/mins of Environment 1:", nrow(scores.env2FULL) -
nrow(scores.env2), " sites (from a total of", nrow(scores.env2FULL), ") removed from Environment 2"))
RedP1C <- nrow(scores.env2FULL) - nrow(scores.env2)
print(paste("Step1. Reduce environmental space to max/mins of Environment 1:", nrow(scores.sp2FULL) -
nrow(scores.sp2), " localities (from a total of", nrow(scores.sp2FULL), ") removed from sp 2 dataset"))
RedP1sp <- nrow(scores.sp2FULL) - nrow(scores.sp2)
AmaxPCA <- max(scores.env1[, 1])
BminPCA <- min(scores.env1[, 1])
PCAvL <- AmaxPCA - BminPCA
PCAvLi <- PCAvL/(R * 1)
Rana <- seq(BminPCA, AmaxPCA, length.out = (R * 1))
if(nae.window==0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 1] <= y + PCAvLi & scores.env1[,
1] >= y), ]
Maxi <- max(scores.env1a[, 2])
Mini <- min(scores.env1a[, 2])
scores.env2a <- scores.env2[which(scores.env2[, 1] <= y + PCAvLi & scores.env2[,
1] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 2] <= Maxi & scores.env2a[, 2] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 1] <= y + PCAvLi & scores.sp2[, 1] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 2] <= Maxi & scores.sp2a[, 2] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
if(nae.window!=0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 1] <= y + ((nae.window+1)*PCAvLi) & scores.env1[,
1] >= y - ((nae.window)*PCAvLi)), ]
Maxi <- max(scores.env1a[, 2])
Mini <- min(scores.env1a[, 2])
scores.env2a <- scores.env2[which(scores.env2[, 1] <= y + PCAvLi & scores.env2[,
1] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 2] <= Maxi & scores.env2a[, 2] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 1] <= y + PCAvLi & scores.sp2[, 1] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 2] <= Maxi & scores.sp2a[, 2] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
#####################################################################################################
AmaxPCA <- max(scores.env1[, 2])
BminPCA <- min(scores.env1[, 2])
PCAvL <- AmaxPCA - BminPCA
PCAvLi <- PCAvL/(R * 1)
Rana <- seq(BminPCA, AmaxPCA, length.out = (R * 1))
if(nae.window==0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + PCAvLi & scores.env1[,
2] >= y), ]
Maxi <- max(scores.env1a[, 1])
Mini <- min(scores.env1a[, 1])
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + PCAvLi & scores.env2[,
2] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 1] <= Maxi & scores.env2a[, 1] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 2] <= y + PCAvLi & scores.sp2[, 2] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 1] <= Maxi & scores.sp2a[, 1] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
if(nae.window!=0){
for (i in Rana) {
y <- i
# scores.env2b <- scores.env2c
scores.env1a <- scores.env1[which(scores.env1[, 2] <= y + ((nae.window+1)*PCAvLi) & scores.env1[,
2] >= y - ((nae.window)*PCAvLi)), ]
Maxi <- max(scores.env1a[, 1])
Mini <- min(scores.env1a[, 1])
scores.env2a <- scores.env2[which(scores.env2[, 2] <= y + PCAvLi & scores.env2[,
2] >= y), ]
scores.env2a <- scores.env2a[which(scores.env2a[, 1] <= Maxi & scores.env2a[, 1] >=
Mini), ]
if (!exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- scores.env2a
}
if (exists("scores.env2b") & exists("scores.env2a")) {
scores.env2b <- rbind(scores.env2a, scores.env2b)
}
scores.sp2a <- scores.sp2[which(scores.sp2[, 2] <= y + PCAvLi & scores.sp2[, 2] >=
y), ]
scores.sp2a <- scores.sp2a[which(scores.sp2a[, 1] <= Maxi & scores.sp2a[, 1] >= Mini),
]
if (!exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- scores.sp2a
}
if (exists("scores.sp2b") & exists("scores.sp2a")) {
scores.sp2b <- rbind(scores.sp2a, scores.sp2b)
}
}
scores.sp2 <- scores.sp2b
rm(scores.sp2b)
scores.env2 <- scores.env2b
rm(scores.env2b)
}
##################################################################################################
print(paste("Step 2. Remove non-analogous environments:", nrow(scores.env2FULL) - nrow(scores.env2) -
RedP1C, " sites removed from environment 2 (from a total of remaining sites", nrow(scores.env2FULL) - nrow(scores.env2),
", after Step 1)"))
print(paste("Step 2. Remove non-analogous environments:", nrow(scores.sp2FULL) - nrow(scores.sp2) -
RedP1sp, " localities removed from sp 2 dataset (from a total of remaining sites", nrow(scores.sp2FULL) - nrow(scores.sp2),
", after Step 1)"))
scores.env12 <- rbind(scores.env1, scores.env2)
## recreate background after adjustments
}
# print(REDUC)
RedP1C <- nrow(scores.env2FULL) - nrow(scores.env2)
RedP1sp <- nrow(scores.sp2FULL) - nrow(scores.sp2)
RedP2C <- nrow(scores.env1FULL) - nrow(scores.env1)
RedP2sp <- nrow(scores.sp1FULL) - nrow(scores.sp1)
# scores.env12<- rbind(scores.env1,scores.env2)
options(warn = 0)
l$env1 <- env1
l$env2 <- env2
l$occ.sp1 <- occ.sp1
l$occ.sp2 <- occ.sp2
l$row.env1 <- row.env1
l$row.env2 <- row.env2
l$row.env12 <- row.env12
l$row.sp1 <- row.sp1
l$row.sp2 <- row.sp2
l$row.env1FULL <- row.env1FULL
l$row.env2FULL <- row.env2FULL
l$row.sp1FULL <- row.sp1FULL
l$row.sp2FULL <- row.sp2FULL
l$pca.cal <- pca.cal
l$scores.env12 <- scores.env12
l$scores.env1 <- scores.env1
l$scores.env2 <- scores.env2
l$scores.sp1 <- scores.sp1
l$scores.sp2 <- scores.sp2
l$scores.env1FULL <- scores.env1FULL
l$scores.env2FULL <- scores.env2FULL
l$scores.sp1FULL <- scores.sp1FULL
l$scores.sp2FULL <- scores.sp2FULL
l$DvalClimP <- DvalClimP
l$RedP1C <- RedP2C
l$RedP1sp <- RedP2sp
l$RedP2C <- RedP1C
l$RedP2sp <- RedP1sp
l$AmaxPCA <- AmaxPCA
l$BminPCA <- BminPCA
l$PCAvL <- PCAvL
l$PCAvLi <- PCAvLi
l$env.reso<-env.reso
l$kern.smooth<-kern.smoothinZ
l$R<-R
invisible(l)
}
#'
#' ##convert geographic space to espace for measuring pnt.index
zz<-humboldt.g2e(env1=reduc.vars$env1, env2=reduc.vars$env2, sp1=occ.sp1, sp2=occ.sp2, reduce.env = 0, reductype = "PCA", non.analogous.environments = "YES", env.trim= T, e.var=c(3:num.var.e),  col.env = e.var, trim.buffer.sp1 = 200, trim.buffer.sp2 = 200, rarefy.dist = 50, rarefy.units="km", env.reso=0.41666669, kern.smooth = 1, R = 100, run.silent = F)
install.packages("adehabitatH$")
install.packages("adehabitatHR")
library(adehabitatHR)
